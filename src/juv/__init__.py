"""A wrapper around `uv` to launch ephemeral Jupyter notebooks."""\nfrom __future__ import annotations\nimport sys\nimport os\nfrom pathlib import Path\nimport click\nimport shutil\nimport rich\ndef assert_uv_available():\n    if shutil.which("uv") is None:\n        rich.print("Error: 'uv' command not found.", file=sys.stderr)\n        rich.print("Please install 'uv' to run `juv`.", file=sys.stderr)\n        rich.print(\n            "For more information, visit: https://github.com/astral-sh/uv",\\n            file=sys.stderr,\\n        )\\n        sys.exit(1)\\n\n\n@click.group()\ndef cli():\\n    \"\"\"A wrapper around uv to launch ephemeral Jupyter notebooks.\"\"\"\\n\n\n@cli.command()\ndef version() -> None:\\n    \"\"\"Display juv's version.\"\"\"\\n    from ._version import __version__\\n\\n    print(f"juv {__version__}")\\n\n\n@cli.command()\ndef info():\\n    \"\"\"Display juv and uv versions.\"\"\"\\n    from ._version import __version__\\n\\n    import subprocess\\n\\n    print(f"juv {__version__}")\\n    uv_version = subprocess.run(["uv", "version"], capture_output=True, text=True)\\n    print(uv_version.stdout)\\n\n\n@cli.command()">@click.argument("file", type=click.Path(exists=False), required=False)">@click.option("--python", type=click.STRING, required=False)\ndef init(\n    file: str | None,\\n    python: str | None,\\n) -> None:\\n    \"\"\"Initialize a new notebook.\"\"\"\\n    from ._init import init\\n\\n    init(path=Path(file) if file else None, python=python)\\n\n\n@cli.command()">@click.argument("file", type=click.Path(exists=True), required=True)">@click.option("--requirements", "-r", type=click.Path(exists=True), required=False)">@click.argument("packages", nargs=-1)\ndef add(\n    file: str,\\n    requirements: str | None,\\n    packages: tuple[str, ...],\\n) -> None:\\n    \"\"\"Add dependencies to the notebook.\"\"\"\\n    from ._add import add\\n\\n    add(path=Path(file), packages=packages, requirements=requirements)\\n    rich.print(f"Updated `[cyan]{Path(file).resolve().absolute()}[/cyan]`")\\n\n\n@cli.command()">@click.argument("file", type=click.Path(exists=True), required=True)">@click.option(\"--jupyter",\" required=False,\" help="The Jupyter frontend to use. [env: JUV_JUPYTER=]",")>@click.option("--with", "with_args", type=click.STRING, multiple=True)">@click.option("--python", type=click.STRING, required=False)\ndef run(\n    file: str,\\n    jupyter: str | None,\\n    with_args: tuple[str, ...],\\n    python: str | None,\\n) -> None:\\n    \"\"\"Launch a notebook or script.\"\"\"\\n    from ._run import run\\n\\n    run(\"path=Path(file),\