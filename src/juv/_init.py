from __future__ import annotations\n\nfrom pathlib import Path\nimport tempfile\nimport subprocess\nimport sys\n\nimport rich\nfrom typing import Optional, List\n\nfrom ._nbconvert import new_notebook, code_cell, write_ipynb\nfrom ._add import add\n\ndef new_notebook_with_inline_metadata(dir: Path, python: Optional[str] = None) -> dict:\n    """Create a new notebook with inline metadata.\n\n    Parameters\n    ----------\n    dir : Path\n        A directory for uv to run `uv init` in. This is used so that we can\n        defer the selection of Python (if not specified) to uv.\n    python : Optional[str]\n        A version of the Python interpreter. Provided as `--python` to uv if specified.\n\n    Returns\n    -------\n    dict\n        A new notebook with a single code cell containing the contents of the\n        script generated by `uv init`.\n    """\n    with tempfile.NamedTemporaryFile(\n        mode="w+",\n        suffix=".py",\n        delete=True,\n        dir=dir,\n    ) as f:\n        cmd = ["uv", "init", "--quiet"]\n        if python:\n            cmd.extend(["--python", python])\n        cmd.extend(["--script", f.name])\n\n        subprocess.run(cmd)\n        f.seek(0)\n        contents = f.read().strip()\n        notebook = new_notebook(cells=[code_cell(contents, hidden=True)])\n\n    return notebook\n\ndef get_first_non_conflicting_untitled_ipynb(dir: Path) -> Path:\n    if not (dir / "Untitled.ipynb").exists():\n        return dir / "Untitled.ipynb"\n\n    for i in range(1, 100):\n        if not (dir / f"Untitled{i}.ipynb").exists():\n            return dir / f"Untitled{i}.ipynb"\n\n    raise ValueError("Could not find an available UntitledX.ipynb")\n\ndef init(\n    path: Optional[Path] = None,\n    python: Optional[str] = None,\n    packages: List[str] = [],\n) -> None:\n    """Initialize a new notebook with optional packages.\n\n    Parameters\n    ----------\n    path : Optional[Path]\n        The path to the notebook file. If not provided, an untitled notebook will be created.\n    python : Optional[str]\n        The version of the Python interpreter to use.\n    packages : List[str]\n        A list of packages to add to the notebook.\n    """\n    if not path:\n        path = get_first_non_conflicting_untitled_ipynb(Path.cwd())\n\n    if not path.suffix == ".ipynb":\n        rich.print("File must have a `[cyan].ipynb[/cyan]` extension.", file=sys.stderr)\n        sys.exit(1)\n\n    if packages:\n        add(path, packages)\n    else:\n        notebook = new_notebook_with_inline_metadata(path.parent, python)\n        write_ipynb(notebook, path)\n\n    rich.print(f"Initialized notebook at `[cyan]{path.resolve().absolute()}[/cyan]`")\n