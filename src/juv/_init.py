from __future__ import annotations

from pathlib import Path
import tempfile
import subprocess
import sys
import typing

import rich

from ._nbconvert import new_notebook, code_cell, write_ipynb


def new_notebook_with_inline_metadata(
    dir: Path, python: str | None = None, packages: list[str] | None = None
) -> dict:
    """Create a new notebook with inline metadata.

    Parameters
    ----------
    dir : pathlib.Path
        A directory for uv to run `uv init` in. This is used so that we can
        defer the selection of Python (if not specified) to uv.
    python : str, optional
        A version of the Python interpreter. Provided as `--python` to uv if specified.
    packages : list[str], optional
        A list of packages to include in the notebook metadata.

    Returns
    -------
    dict
        A new notebook with a single code cell containing the contents of the
        script generated by `uv init`.
    """
    with tempfile.NamedTemporaryFile(
        mode="w+",
        suffix=".py",
        delete=True,
        dir=dir,
    ) as f:
        cmd = ["uv", "init", "--quiet"]
        if python:
            cmd.extend(["--python", python])
        if packages:
            cmd.extend(["--with", ",".join(packages)])
        cmd.extend(["--script", f.name])

        subprocess.run(cmd, check=True)
        f.seek(0)
        contents = f.read().strip()
        notebook = new_notebook(cells=[code_cell(contents, hidden=True)])

    return notebook


def find_available_notebook_path(dir: Path) -> Path:
    """Find the first available UntitledX.ipynb file path in the given directory.

    Parameters
    ----------
    dir : pathlib.Path
        The directory to search for available UntitledX.ipynb files.

    Returns
    -------
    pathlib.Path
        The path to the first available UntitledX.ipynb file.

    Raises
    ------
    ValueError
        If no available UntitledX.ipynb file path is found within the first 100 attempts.
    """
    base_path = dir / "Untitled.ipynb"
    if not base_path.exists():
        return base_path

    for i in range(1, 100):
        candidate_path = dir / f"Untitled{i}.ipynb"
        if not candidate_path.exists():
            return candidate_path

    raise ValueError("Could not find an available UntitledX.ipynb")


def init(
    path: Path | None = None,
    python: str | None = None,
    packages: list[str] | None = None,
) -> None:
    """Initialize a new notebook with optional Python version and packages.

    Parameters
    ----------
    path : pathlib.Path, optional
        The path to the notebook file to initialize. If not provided, an available
        UntitledX.ipynb file path in the current working directory will be used.
    python : str, optional
        The Python version to use for the notebook.
    packages : list[str], optional
        A list of packages to include in the notebook metadata.
    """
    if path is None:
        path = find_available_notebook_path(Path.cwd())

    if path.suffix != ".ipynb":
        rich.print("File must have a `[cyan].ipynb[/cyan]` extension.", file=sys.stderr)
        sys.exit(1)

    notebook = new_notebook_with_inline_metadata(path.parent, python, packages)
    write_ipynb(notebook, path)

    rich.print(f"Initialized notebook at `[cyan]{path.resolve().absolute()}[/cyan]`")