from __future__ import annotations

from pathlib import Path
import tempfile
import subprocess
import sys
import warnings

import rich

from ._nbconvert import new_notebook, code_cell, write_ipynb


def new_notebook_with_inline_metadata(dir: Path, python: str | None = None) -> dict:
    """Create a new notebook with inline metadata.\n\n    Parameters\n    ----------\n    dir : pathlib.Path\n        A directory for uv to run `uv init` in. This is used so that we can\n        defer the selection of Python (if not specified) to uv.\n    python : str, optional\n        A version of the Python interpreter. Provided as `--python` to uv if specified.\n\n    Returns\n    -------\n    dict\n        A new notebook with a single code cell containing the contents of the\n        script generated by `uv init`.\n    """
    with tempfile.NamedTemporaryFile(
        mode="w+",
        suffix=".py",
        delete=True,
        dir=dir,
    ) as f:
        cmd = ["uv", "init", "--quiet"]
        if python:
            cmd.extend(["--python", python])
        cmd.extend(["--script", f.name])

        subprocess.run(cmd, check=True)
        f.seek(0)
        contents = f.read().strip()
        notebook = new_notebook(cells=[code_cell(contents, hidden=True)])

    return notebook


def get_first_non_conflicting_untitled_ipynb(dir: Path) -> Path:
    if not (dir / "Untitled.ipynb").exists():
        return dir / "Untitled.ipynb"

    for i in range(1, 100):
        if not (dir / f"Untitled{i}.ipynb").exists():
            return dir / f"Untitled{i}.ipynb"

    raise ValueError("Could not find an available UntitledX.ipynb")


def init(path: Path | None = None, python: str | None = None) -> None:
    """Initialize a new notebook."""
    if path is None:
        path = get_first_non_conflicting_untitled_ipynb(Path.cwd())

    if path.suffix != ".ipynb":
        warnings.warn(
            "File must have a `.ipynb` extension.", category=UserWarning, stacklevel=2
        )
        sys.exit(1)

    notebook = new_notebook_with_inline_metadata(path.parent, python)
    write_ipynb(notebook, path)

    rich.print(f"Initialized notebook at `[cyan]{path.resolve().absolute()}[/cyan]`")


# Test cases
def test_new_notebook_with_inline_metadata(tmp_path: Path) -> None:
    notebook = new_notebook_with_inline_metadata(tmp_path, python="3.9")
    assert len(notebook["cells"]) == 1
    assert notebook["cells"][0]["cell_type"] == "code"
    assert notebook["cells"][0]["source"].startswith("# This script was generated by uv.")


def test_get_first_non_conflicting_untitled_ipynb(tmp_path: Path) -> None:
    path = get_first_non_conflicting_untitled_ipynb(tmp_path)
    assert path.name == "Untitled.ipynb"

    path.touch()
    path = get_first_non_conflicting_untitled_ipynb(tmp_path)
    assert path.name == "Untitled1.ipynb"