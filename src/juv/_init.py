from __future__ import annotations

from pathlib import Path
import tempfile
import subprocess
import sys

import rich

from ._nbconvert import new_notebook, code_cell, write_ipynb


def new_notebook_with_inline_metadata(dir: Path, python: str | None = None, dependencies: list[str] | None = None) -> dict:
    """Create a new notebook with inline metadata.\n\n    Parameters\n    ----------\n    dir : pathlib.Path\n        A directory for uv to run `uv init` in. This is used so that we can\n        defer the selection of Python (if not specified) to uv.\n    python : str, optional\n        A version of the Python interpreter. Provided as `--python` to uv if specified.\n    dependencies : list[str], optional\n        A list of dependencies to include in the initialization.\n\n    Returns\n    -------\n    dict\n        A new notebook with a single code cell containing the contents of the\n        script generated by `uv init`.\n    """
    with tempfile.NamedTemporaryFile(
        mode="w+",
        suffix=".py",
        delete=True,
        dir=dir,
    ) as f:
        cmd = ["uv", "init", "--quiet"]
        if python:
            cmd.extend(["--python", python])
        if dependencies:
            cmd.extend(["--with", ",".join(dependencies)])
        cmd.extend(["--script", f.name])

        subprocess.run(cmd, check=True)
        f.seek(0)
        contents = f.read().strip()
        notebook = new_notebook(cells=[code_cell(contents, hidden=True)])

    return notebook


def get_first_non_conflicting_untitled_ipynb(dir: Path) -> Path:
    """Find the first available Untitled.ipynb or UntitledX.ipynb file in the directory.\n\n    Parameters\n    ----------\n    dir : pathlib.Path\n        The directory to search for an available file.\n\n    Returns\n    -------\n    pathlib.Path\n        The path to the first available Untitled file.\n\n    Raises\n    ------\n    ValueError\n        If no available Untitled file is found within 100 attempts.\n    """
    base_path = dir / "Untitled"
    if not base_path.with_suffix(".ipynb").exists():
        return base_path.with_suffix(".ipynb")

    for i in range(1, 100):
        if not base_path.with_suffix(f"{i}.ipynb").exists():
            return base_path.with_suffix(f"{i}.ipynb")

    raise ValueError("Could not find an available UntitledX.ipynb")


def init(
    path: Path | None = None,
    python: str | None = None,
    dependencies: list[str] | None = None,
) -> None:
    """Initialize a new notebook with optional Python version and dependencies.\n\n    Parameters\n    ----------\n    path : pathlib.Path, optional\n        The path to the notebook file to initialize. If not provided, an available Untitled file is used.\n    python : str, optional\n        The version of the Python interpreter to use.\n    dependencies : list[str], optional\n        A list of dependencies to include in the initialization.\n    """
    if path is None:
        path = get_first_non_conflicting_untitled_ipynb(Path.cwd())

    if path.suffix != ".ipynb":
        rich.print("File must have a `[cyan].ipynb[/cyan]` extension.", file=sys.stderr)
        sys.exit(1)

    notebook = new_notebook_with_inline_metadata(path.parent, python, dependencies)
    write_ipynb(notebook, path)

    rich.print(f"Initialized notebook at `[cyan]{path.resolve().absolute()}[/cyan]`")