from __future__ import annotations

from pathlib import Path
import tempfile
import subprocess
import sys

import rich

from ._nbconvert import new_notebook, code_cell, write_ipynb
from ._pep723 import parse_inline_script_metadata, extract_inline_meta


def new_notebook_with_inline_metadata(dir: Path, python: str | None = None) -> dict:
    """Create a new notebook with inline metadata.\n\n    Parameters\n    ----------\n    dir : pathlib.Path\n        A directory for uv to run `uv init` in. This is used so that we can\n        defer the selection of Python (if not specified) to uv.\n    python : str, optional\n        A version of the Python interpreter. Provided as `--python` to uv if specified.\n\n    Returns\n    -------\n    dict\n        A new notebook with a single code cell containing the contents of the\n        script generated by `uv init`.\n    """
    with tempfile.NamedTemporaryFile(
        mode="w+",
        suffix=".py",
        delete=True,
        dir=dir,
    ) as f:
        cmd = ["uv", "init", "--quiet"]
        if python:
            cmd.extend(["--python", python])
        cmd.extend(["--script", f.name])

        subprocess.run(cmd, check=True)
        f.seek(0)
        contents = f.read().strip()
        inline_meta, script = extract_inline_meta(contents)
        cells = [code_cell(script, hidden=True)]
        if inline_meta:
            cells.insert(0, code_cell(inline_meta, hidden=True))
        notebook = new_notebook(cells=cells)

    return notebook


def get_first_non_conflicting_untitled_ipynb(dir: Path) -> Path:
    base_name = "Untitled"
    for i in range(100):
        filename = f"{base_name}{i if i > 0 else ''}.ipynb"
        path = dir / filename
        if not path.exists():
            return path

    raise ValueError("Could not find an available UntitledX.ipynb")


def init(
    path: Path | None,
    python: str | None,
) -> None:
    """Initialize a new notebook."""
    if path is None:
        path = get_first_non_conflicting_untitled_ipynb(Path.cwd())

    if path.suffix != ".ipynb":
        rich.print("File must have a `[cyan].ipynb[/cyan]` extension.", file=sys.stderr)
        sys.exit(1)

    notebook = new_notebook_with_inline_metadata(path.parent, python)
    write_ipynb(notebook, path)

    rich.print(f"Initialized notebook at `[cyan]{path.resolve().absolute()}[/cyan]`")