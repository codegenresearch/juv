import pytest\nfrom pathlib import Path\nfrom unittest.mock import patch\nimport pathlib\nimport re\nimport os\nfrom inline_snapshot import snapshot\n\nimport jupytext\nfrom nbformat.v4.nbbase import new_code_cell, new_notebook\n\nfrom click.testing import CliRunner, Result\n\nfrom juv import cli, assert_uv_available\nfrom juv._nbconvert import write_ipynb\nfrom juv._pep723 import parse_inline_script_metadata\nfrom juv._run import to_notebook, prepare_uvx_args, Runtime, Pep723Meta\n\ndef invoke(args: list[str], uv_python: str = "3.13") -> Result:\n    return CliRunner().invoke(\n        cli,\n        args,\n        env={**os.environ, "UV_PYTHON": uv_python},\n    )\n\n@pytest.fixture\ndef sample_script() -> str:\n    return """\n# /// script\n# dependencies = ["numpy", "pandas"]\n# requires-python = ">=3.8"\n# ///\n\nimport numpy as np\nimport pandas as pd\n\nprint('Hello, world!')\n"""\n\n@pytest.fixture\ndef sample_notebook() -> dict:\n    return {\n        "cells": [\n            {\n                "cell_type": "code",\n                "source": "# /// script\n# dependencies = [\"pandas\"]\n# ///\n\nimport pandas as pd\nprint('Hello, pandas!')",\n            }\n        ],\n        "nbformat": 4,\n        "nbformat_minor": 5,\n    }\n\ndef test_parse_pep723_meta(sample_script: str) -> None:\n    meta = parse_inline_script_metadata(sample_script)\n    assert meta == snapshot("""\ndependencies = ["numpy", "pandas"]\nrequires-python = ">=3.8"\n""")\n\ndef test_parse_pep723_meta_no_meta() -> None:\n    script_without_meta = "print('Hello, world!')"\n    assert parse_inline_script_metadata(script_without_meta) is None\n\ndef filter_ids(output: str) -> str:\n    return re.sub(r'"id": "[a-zA-Z0-9-]+"', '"id": "<ID>"', output)\n\ndef test_to_notebook_script(tmp_path: pathlib.Path):\n    script = tmp_path / "script.py"\n    script.write_text("""# /// script\n# dependencies = [\"numpy\"]\n# requires-python = ">=3.8"\n# ///\n\n\nimport numpy as np\n\n# %%\nprint('Hello, numpy!')\narr = np.array([1, 2, 3])""")\n\n    meta, nb = to_notebook(script)\n    output = jupytext.writes(nb, fmt="ipynb")\n    output = filter_ids(output)\n\n    assert (meta, output) == snapshot((\n        """\ndependencies = ["numpy"]\nrequires-python = ">=3.8"\n""",\n        """\n{\n "cells": [\n  {\n   "cell_type": "code",\n   "execution_count": null,\n   "id": "<ID>",\n   "metadata": {\n    "jupyter": {\n     "source_hidden": true\n    }\n   },\n   "outputs": [],\n   "source": [\n    "# /// script\\n",\n    "# dependencies = \\\"numpy\\\"\\n",\n    "# requires-python = \\">=3.8\\\"\\n",\n    "# ///"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": null,\n   "id": "<ID>",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n    "import numpy as np"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": null,\n   "id": "<ID>",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n    "print('Hello, numpy!')\\n",\n    "arr = np.array([1, 2, 3])"\n   ]\n  }\n ],\n "metadata": {\n  "jupytext": {\n   "cell_metadata_filter": "-all",\n   "main_language": "python",\n   "notebook_metadata_filter": "-all"\n  }\n },\n "nbformat": 4,\n "nbformat_minor": 5\n}\n""",\n    ))\n\ndef test_assert_uv_available() -> None:\n    with patch("shutil.which", return_value=None):\n        with pytest.raises(SystemExit):\n            assert_uv_available()\n\ndef test_python_override() -> None:\n    assert prepare_uvx_args(\n        target=Path("test.ipynb"),\n        runtime=Runtime("nbclassic", None),\n        pep723_meta=Pep723Meta(dependencies=["numpy"], requires_python="3.8"),\n        with_args=["polars"],\n        python="3.12",\n    ) == snapshot([\n        "--from=jupyter-core",\n        "--with=setuptools", "--with",\n        "polars",\n        "--python",\n        "3.12", "--with=numpy", "--with=nbclassic", "jupyter",\n        "nbclassic",\n        "test.ipynb",\n    ])\n\ndef test_run_nbclassic() -> None:\n    assert prepare_uvx_args(\n        target=Path("test.ipynb"),\n        runtime=Runtime("nbclassic", None),\n        pep723_meta=Pep723Meta(dependencies=["numpy"], requires_python="3.8"),\n        python=None,\n        with_args=["polars"],\n    ) == snapshot([\n        "--from=jupyter-core",\n        "--with=setuptools", "--with", "polars", "--python=3.8",\n        "--with=numpy",\n        "--with=nbclassic", "jupyter",\n        "nbclassic",\n        "test.ipynb",\n    ])\n\ndef test_run_notebook() -> None:\n    assert prepare_uvx_args(\n        target=Path("test.ipynb"),\n        runtime=Runtime("notebook", "6.4.0"),\n        pep723_meta=Pep723Meta(dependencies=[], requires_python=None),\n        with_args=[],\n        python=None,\n    ) == snapshot([\n        "--from=jupyter-core",\n        "--with=setuptools",\n        "--with=notebook==6.4.0",\n        "jupyter",\n        "notebook",\n        "test.ipynb",\n    ])\n\ndef test_run_jlab() -> None:\n    assert prepare_uvx_args(\n        target=Path("test.ipynb"),\n        runtime=Runtime("lab", None),\n        pep723_meta=Pep723Meta(dependencies=["numpy"], requires_python="3.8"),\n        python=None,\n        with_args=["polars,altair"],\n    ) == snapshot([\n        "--from=jupyter-core",\n        "--with=setuptools", "--with", "polars,altair", "--python=3.8",\n        "--with=numpy",\n        "--with=jupyterlab", "jupyter",\n        "lab",\n        "test.ipynb",\n    ])\n\ndef filter_tempfile_ipynb(output: str) -> str:\n    """Replace the temporary directory in the output with <TEMPDIR> for snapshotting."""\n    pattern = r"`([^`\n]+\n?[^`\n]+/)([^/\n]+\.ipynb)`"\n    replacement = r"`<TEMPDIR>/\2`"\n    return re.sub(pattern, replacement, output)\n\ndef test_add_creates_inline_meta(tmp_path: pathlib.Path) -> None:\n    nb = tmp_path / "foo.ipynb"\n    write_ipynb(new_notebook(), nb)\n    result = invoke(["add", str(nb), "polars==1", "anywidget"], uv_python="3.11")\n    assert result.exit_code == 0\n    assert filter_tempfile_ipynb(result.stdout) == snapshot("""\nUpdated \n`<TEMPDIR>/foo.ipynb`\n""")\n    assert filter_ids(nb.read_text()) == snapshot("""\n{\n "cells": [\n  {\n   "cell_type": "code",\n   "execution_count": null,\n   "id": "<ID>",\n   "metadata": {\n    "jupyter": {\n     "source_hidden": true\n    }\n   },\n   "outputs": [],\n   "source": [\n    "# /// script\\n",\n    "# requires-python = \\">=3.11\\\"\\n",\n    "# dependencies = [\\n",\n    "#     \\\"anywidget\\\",\\n",\n    "#     \\\"polars==1\\\",\\n",\n    "# ]\\n",\n    "# ///"\n   ]\n  }\n ],\n "metadata": {},\n "nbformat": 4,\n "nbformat_minor": 5\n}\n""")\n\ndef test_add_prepends_script_meta(tmp_path: pathlib.Path) -> None:\n    path = tmp_path / "empty.ipynb"\n    write_ipynb(\n        new_notebook(cells=[new_code_cell("print('Hello, world!')")]),\n        path,\n    )\n    result = invoke(["add", str(path), "polars==1", "anywidget"], uv_python="3.10")\n    assert result.exit_code == 0\n    assert filter_tempfile_ipynb(result.stdout) == snapshot("""\nUpdated \n`<TEMPDIR>/empty.ipynb`\n""")\n    assert filter_ids(path.read_text()) == snapshot("""\n{\n "cells": [\n  {\n   "cell_type": "code",\n   "execution_count": null,\n   "id": "<ID>",\n   "metadata": {\n    "jupyter": {\n     "source_hidden": true\n    }\n   },\n   "outputs": [],\n   "source": [\n    "# /// script\\n",\n    "# requires-python = \\">=3.10\\\"\\n",\n    "# dependencies = [\\n",\n    "#     \\\"anywidget\\\",\\n",\n    "#     \\\"polars==1\\\",\\n",\n    "# ]\\n",\n    "# ///"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": null,\n   "id": "<ID>",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n    "print('Hello, world!')"\n   ]\n  }\n ],\n "metadata": {},\n "nbformat": 4,\n "nbformat_minor": 5\n}\n""")\n\ndef test_add_updates_existing_meta(tmp_path: pathlib.Path) -> None:\n    path = tmp_path / "empty.ipynb"\n    nb = new_notebook(\n        cells=[\n            new_code_cell("""# /// script\n# dependencies = [\"numpy\"]\n# requires-python = ">=3.8"\n# ///\nimport numpy as np\nprint('Hello, numpy!')""")\n        ]\n    )\n    write_ipynb(nb, path)\n    result = invoke(["add", str(path), "polars==1", "anywidget"], uv_python="3.13")\n    assert result.exit_code == 0\n    assert filter_tempfile_ipynb(result.stdout) == snapshot("""\nUpdated \n`<TEMPDIR>/empty.ipynb`\n""")\n    assert filter_ids(path.read_text()) == snapshot("""\n{\n "cells": [\n  {\n   "cell_type": "code",\n   "execution_count": null,\n   "id": "<ID>",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n    "# /// script\\n",\n    "# dependencies = [\\n",\n    "#     \\\"anywidget\\\",\\n",\n    "#     \\\"numpy\\\",\\n",\n    "#     \\\"polars==1\\\",\\n",\n    "# ]\\n",\n    "# requires-python = \\">=3.8\\\"\\n",\n    "# ///\\n",\n    "import numpy as np\\n",\n    "print('Hello, numpy!')"\n   ]\n  }\n ],\n "metadata": {},\n "nbformat": 4,\n "nbformat_minor": 5\n}\n""")\n\ndef test_init_creates_notebook_with_inline_meta(tmp_path: pathlib.Path) -> None:\n    path = tmp_path / "empty.ipynb"\n    result = invoke(["init", str(path), "--with=", "numpy", "pandas"], uv_python="3.13")\n    assert result.exit_code == 0\n    assert filter_tempfile_ipynb(result.stdout) == snapshot("""\nInitialized notebook at \n`<TEMPDIR>/empty.ipynb`\n""")\n    assert filter_ids(path.read_text()) == snapshot("""\n{\n "cells": [\n  {\n   "cell_type": "code",\n   "execution_count": null,\n   "id": "<ID>",\n   "metadata": {\n    "jupyter": {\n     "source_hidden": true\n    }\n   },\n   "outputs": [],\n   "source": [\n    "# /// script\\n",\n    "# requires-python = \\">=3.13\\\"\\n",\n    "# dependencies = [\\n",\n    "#     \\\"numpy\\\",\\n",\n    "#     \\\"pandas\\\",\\n",\n    "# ]\\n",\n    "# ///"\n   ]\n  }\n ],\n "metadata": {},\n "nbformat": 4,\n "nbformat_minor": 5\n}\n""")\n\ndef test_init_creates_notebook_with_specific_python_version(\n    tmp_path: pathlib.Path,\n) -> None:\n    path = tmp_path / "empty.ipynb"\n    result = invoke(["init", str(path), "--python=3.8", "--with=", "numpy", "pandas"])\n    assert result.exit_code == 0\n    assert filter_tempfile_ipynb(result.stdout) == snapshot("""\nInitialized notebook at \n`<TEMPDIR>/empty.ipynb`\n""")\n    assert filter_ids(path.read_text()) == snapshot("""\n{\n "cells": [\n  {\n   "cell_type": "code",\n   "execution_count": null,\n   "id": "<ID>",\n   "metadata": {\n    "jupyter": {\n     "source_hidden": true\n    }\n   },\n   "outputs": [],\n   "source": [\n    "# /// script\\n",\n    "# requires-python = \\">=3.8\\\"\\n",\n    "# dependencies = [\\n",\n    "#     \\\"numpy\\\",\\n",\n    "#     \\\"pandas\\\",\\n",\n    "# ]\\n",\n    "# ///"\n   ]\n  }\n ],\n "metadata": {},\n "nbformat": 4,\n "nbformat_minor": 5\n}\n""")\n